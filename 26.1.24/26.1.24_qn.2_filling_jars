Complete the solve function in the editor below.

solve has the following parameters:

int n: the number of candy jars
int operations[m][3]: a 2-dimensional array of operations
Returns

int: the floor of the average number of canidies in all jars
Input Format

The first line contains two integers,  and , separated by a single space.
 lines follow. Each of them contains three integers, , , and , separated by spaces.

Constraints





Sample Input

STDIN       Function
-----       --------
5 3         n = 5, operations[] size = 3
1 2 100     operations = [[1, 2, 100], [2, 5, 100], [3, 4, 100]]
2 5 100
3 4 100
Sample Output

160
Explanation

Initially each of the jars contains 0 candies

0 0 0 0 0  
First operation:

100 100 0 0 0  
Second operation:

100 200 100 100 100  
Third operation:

100 200 200 200 100  
Total = 800, Average = 800/5 = 160

Submissions: 113
Max Score: 10
Difficulty: Easy
Rate This Challenge:

    
More
 
1
?
2
#!/bin/python3
3
?
4
import math
5
import os
6
import random
7
import re
8
import sys
9
?
10
#
11
# Complete the 'solve' function below.
12
#
13
# The function is expected to return an INTEGER.
14
# The function accepts following parameters:
15
#  1. INTEGER n
16
#  2. 2D_INTEGER_ARRAY operations
17
#
18
?
19
def solve(n, operations):
20
    # Write your code here
21
?
22
if __name__ == '__main__':
23
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
24
?
25
    first_multiple_input = input().rstrip().split()
26
?
27
    n = int(first_multiple_input[0])
28
?
29
    m = int(first_multiple_input[1])
30
?
31
    operations = []
32
?
33
    for _ in range(m):
34
        operations.append(list(map(int, input().rstrip().split())))
35
?
36
    result = solve(n, operations)
37
?
38
    fptr.write(str(result) + '\n')
39
?
40
    fptr.close()
?
