Complete the anagram function in the editor below.

anagram has the following parameter(s):

string s: a string
Returns

int: the minimum number of characters to change or -1.
Input Format

The first line will contain an integer, , the number of test cases.
Each test case will contain a string .

Constraints


 consists only of characters in the range ascii[a-z].
Sample Input

6
aaabbb
ab
abc
mnop
xyyx
xaxbbbxx
Sample Output

3
1
-1
2
0
1
Explanation

Test Case #01: We split  into two strings ='aaa' and ='bbb'. We have to replace all three characters from the first string with 'b' to make the strings anagrams.

Test Case #02: You have to replace 'a' with 'b', which will generate "bb".

Test Case #03: It is not possible for two strings of unequal length to be anagrams of one another.

Test Case #04: We have to replace both the characters of first string ("mn") to make it an anagram of the other one.

Test Case #05:  and  are already anagrams of one another.

Test Case #06: Here S1 = "xaxb" and S2 = "bbxx". You must replace 'a' from S1 with 'b' so that S1 = "xbxb".

Submissions: 64
Max Score: 25
Difficulty: Easy
Rate This Challenge:

    
More
 
1
#!/bin/python3
2
?
3
import math
4
import os
5
import random
6
import re
7
import syn
8
?
9
def anagram(s):
10
    strlen = len(s)
11
    if strlen == 0 or strlen%2 != 0:
12
        return -1
13
?
14
    tochange = 0
15
    sublen = strlen//2
16
    lhs, rhs = s[:sublen], list(s[sublen:])
17
    for char in lhs:
18
        if char not in rhs:
19
            tochange += 1
20
        else:
21
            rhs.remove(char)
22
    return tochange
23
if _name_ == '_main_':
24
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
25
    q = int(input().strip())
26
    for q_itr in range(q):
27
        s = input()
28
        result = anagram(s)
29
        fptr.write(str(result) + '\n')
30
    fptr.close()
